/* tslint:disable */
/* eslint-disable */
/**
 * Geocoding
 * With the Geocoding service you can find locations by converting street addresses into GPS-coordinates and vice versa. The Places service allows to search for millions of shops and prominent points of interest in various categories.
 *
 * The version of the OpenAPI document: 1.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Address } from './Address';
import {
    AddressFromJSON,
    AddressFromJSONTyped,
    AddressToJSON,
} from './Address';
import type { ReferencePosition } from './ReferencePosition';
import {
    ReferencePositionFromJSON,
    ReferencePositionFromJSONTyped,
    ReferencePositionToJSON,
} from './ReferencePosition';
import type { RoadAccessPosition } from './RoadAccessPosition';
import {
    RoadAccessPositionFromJSON,
    RoadAccessPositionFromJSONTyped,
    RoadAccessPositionToJSON,
} from './RoadAccessPosition';

/**
 * 
 * @export
 * @interface LocationProperties
 */
export interface LocationProperties {
    /**
     * 
     * @type {ReferencePosition}
     * @memberof LocationProperties
     */
    referencePosition: ReferencePosition;
    /**
     * 
     * @type {RoadAccessPosition}
     * @memberof LocationProperties
     */
    roadAccessPosition?: RoadAccessPosition;
    /**
     * 
     * @type {Address}
     * @memberof LocationProperties
     */
    address: Address;
    /**
     * A single string representing the address, typically consisting of the street, house number, postal code, city, and country. The precise format may differ based on what is appropriate for the address.
     * @type {string}
     * @memberof LocationProperties
     */
    formattedAddress?: string;
}

/**
 * Check if a given object implements the LocationProperties interface.
 */
export function instanceOfLocationProperties(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "referencePosition" in value;
    isInstance = isInstance && "address" in value;

    return isInstance;
}

export function LocationPropertiesFromJSON(json: any): LocationProperties {
    return LocationPropertiesFromJSONTyped(json, false);
}

export function LocationPropertiesFromJSONTyped(json: any, ignoreDiscriminator: boolean): LocationProperties {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'referencePosition': ReferencePositionFromJSON(json['referencePosition']),
        'roadAccessPosition': !exists(json, 'roadAccessPosition') ? undefined : RoadAccessPositionFromJSON(json['roadAccessPosition']),
        'address': AddressFromJSON(json['address']),
        'formattedAddress': !exists(json, 'formattedAddress') ? undefined : json['formattedAddress'],
    };
}

export function LocationPropertiesToJSON(value?: LocationProperties | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'referencePosition': ReferencePositionToJSON(value.referencePosition),
        'roadAccessPosition': RoadAccessPositionToJSON(value.roadAccessPosition),
        'address': AddressToJSON(value.address),
        'formattedAddress': value.formattedAddress,
    };
}

